name: Build Shaka Packager

description: |
  A reusable action to build Shaka Packager.
  Leaves build artifacts in the "artifacts" folder.

inputs:
  os_name:
    description: The name of the OS (one word).  Appended to artifact filenames.
    required: true
  target_arch:
    description: The CPU architecture to target.  We support x64, arm64.
    required: true
  lib_type:
    description: A library type, either "static" or "shared".
    required: true
  build_type:
    description: A build type, either "Debug" or "Release".
    required: true
  build_type_suffix:
    description: A suffix to append to the build type in the output path.
    required: false
    default: ""
  exe_ext:
    description: The extension on executable files.
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Install Linux deps
      if: runner.os == 'Linux'
      shell: bash
      run: sudo apt install -y libc-ares-dev

    - name: Generate build files
      shell: bash
      run: |
        echo "::group::Generate makefiles"
        mkdir -p build/

        if [[ "${{ inputs.lib_type }}" == "shared" ]]; then
          LIBPACKAGER_SHARED="ON"
        else
          LIBPACKAGER_SHARED="OFF"
        fi

        cmake \
          -DCMAKE_BUILD_TYPE="${{ inputs.build_type }}" \
          -DLIBPACKAGER_SHARED="$LIBPACKAGER_SHARED" \
          -S . \
          -B build/
        echo "::endgroup::"

    - name: Build (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "::group::Build"
        make -C build/
        echo "::endgroup::"

    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "::group::Build"
        cd build
        msbuild shaka-packager.sln
        echo "::endgroup::"

    # TODO(joeyparrish): Prepare artifacts when build system is complete again
#    - name: Prepare artifacts (static release only)
#      shell: bash
#      run: |
#        BUILD_CONFIG="${{ inputs.build_type }}-${{ inputs.lib_type }}"
#        if [[ "$BUILD_CONFIG" != "Release-static" ]]; then
#          echo "Skipping artifacts for $BUILD_CONFIG."
#          exit 0
#        fi
#        if [[ "${{ runner.os }}" == "Linux" ]]; then
#          echo "::group::Check for static executables"
#          (
#            cd build/Release${{ inputs.build_type_suffix }}
#            # Prove that we built static executables on Linux.  First, check that
#            # the executables exist, and fail if they do not.  Then check "ldd",
#            # which will fail if the executable is not dynamically linked.  If
#            # "ldd" succeeds, we fail the workflow.  Finally, we call "true" so
#            # that the last executed statement will be a success, and the step
#            # won't be failed if we get that far.
#            ls packager mpd_generator >/dev/null || exit 1
#            ldd packager 2>&1 && exit 1
#            ldd mpd_generator 2>&1 && exit 1
#            true
#          )
#          echo "::endgroup::"
#        fi
#        echo "::group::Prepare artifacts folder"
#        mkdir artifacts
#        ARTIFACTS="$GITHUB_WORKSPACE/artifacts"
#        cd build/Release${{ inputs.build_type_suffix }}
#        echo "::endgroup::"
#        echo "::group::Strip executables"
#        strip packager${{ inputs.exe_ext }}
#        strip mpd_generator${{ inputs.exe_ext }}
#        echo "::endgroup::"
#        SUFFIX="-${{ inputs.os_name }}-${{ inputs.target_arch }}"
#        EXE_SUFFIX="$SUFFIX${{ inputs.exe_ext}}"
#        echo "::group::Copy packager"
#        cp packager${{ inputs.exe_ext }} $ARTIFACTS/packager$EXE_SUFFIX
#        echo "::endgroup::"
#        echo "::group::Copy mpd_generator"
#        cp mpd_generator${{ inputs.exe_ext }} $ARTIFACTS/mpd_generator$EXE_SUFFIX
#        echo "::endgroup::"
#        # The pssh-box bundle is OS and architecture independent.  So only do
#        # it on this one OS and architecture, and give it a more generic
#        # filename.
#        if [[ '${{ inputs.os_name }}' == 'linux' && '${{ inputs.target_arch }}' == 'x64' ]]; then
#          echo "::group::Tar pssh-box"
#          tar -czf $ARTIFACTS/pssh-box.py.tar.gz pyproto pssh-box.py
#          echo "::endgroup::"
#        fi
